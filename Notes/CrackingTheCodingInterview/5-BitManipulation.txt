Bitwise Expessions 
== 
And & 
  x &  0 =  0 
  x & ~0 =  x
  x &  x =  x
Or | 
  x |  0 =  x 
  x | ~0 = ~0
  x |  x =  x
Xor ^ 
  x ^  0 =  x 
  x ^ ~0 = ~x
  x ^  x =  0
  
  
Two's Compilment 
== 
Ints are typically stored in two's compliment representation 
  First bit is sign bit, set for negative, unset for positive 
  For negative, flip the bits in the positive representation and add 1 
    Suppose 4 bit numbers 
     3 = 0b0011 
    -3 = 0b1101
    
Arithmetic vs Logical Right Shift 
==
Arithmetic shift operates as a division by 2, preserving the sign bit 
  -4 >> 1 = -2 
  0b1100 >> 1 = 0b1010
Logical shift moves everything, doesn't care that the first bit was the sign bit
  -4 >>> 1 = 3 
  0b1100 >>> 1 = 0b0011
  
Common Tasks 
== 
Check if Nth bit is set 
  ((x & (1 << N)) != 0) 
Set Nth bit 
  x |= (1 << N)
Clear Nth bit 
  x &= ~(1 << N) 
Update Nth bit to state B(set, unset) 
  Book provides following 
    int bit = B ? 1 : 0; 
    int mask = ~(1 << i) 
    return (x & mask) | (bit << N) 
  Not clear why thats better than 
    int bit = 1 << N
    return B ? x | bit : x & ~bit
  Which seems simpler to me, maybe missing something 
